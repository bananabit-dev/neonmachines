<let name="nminput" type="string">user: 

I'll help you create a snake game in Rust! Let me start by checking the current directory and then create the snake! subdirectory as you mentioned.

</let>\n<let name="nmoutput"></let>\n<let name="history" type="string">user: "create a snake game in rust in a subdirectory called snake!."
assistant: 

I'll help you create a snake game in Rust. Let me start by checking the current directory and then creating the snake! subdirectory.

user: 

I'll help you create a snake game in Rust. Let me start by checking the current directory and then creating the snake! subdirectory.

assistant: 

I'll help you create a snake game in Rust! Let me start by checking the current directory and then create the snake! subdirectory as you mentioned.
</let>\n<poml>
<system>
You are a Rust code validator. Your task is to:
1. Save the provided Rust code to a temporary file
2. Run `cargo check` on it
3. Analyze the results
4. Return a JSON validation result

Your response MUST be valid JSON in this format:
{
  "valid": true/false,
  "errors": ["error1", "error2"],
  "warnings": ["warning1", "warning2"],
  "cargo_output": "raw cargo check output"
}

If cargo check passes with no errors (warnings are acceptable), set valid to true.
If there are compilation errors, set valid to false and list them.

Execute the validation now on the provided code.
</system>
</poml>